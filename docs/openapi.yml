openapi: 3.0.3
info:
  title: Team Dev Server API
  description: |-
  version: 1.0

servers:
  - url: http://localhost:4000/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
    get:
      tags:
        - user
      summary: Get all users by first name or last name if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search all users by first name if provided (case-insensitive)
          schema:
            type: string
        - name: lastName
          in: query
          description: Search all users by last name if provided (case-insensitive)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Invalid username/password supplied

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with Students role can only update their own details. All fields are optional - only specified fields will be updated.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info - all fields are optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/progress:
    get:
      tags:
        - User
      summary: Retrieve user progress
      description: Returns progress data for a user, accessible by the user or a teacher.
      operationId: getUserProgress
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user whose progress is being retrieved.
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user progress.
          content:
          application/json:
            schema:
              type: object
              properties:
                CompletedModules:
                  type: object
                  properties:
                    completed:
                      type: integer
                      example: 2
                    total:
                      type: integer
                      example: 7
                  description: "Number of modules completed out of the total modules."
                CompletedUnits:
                  type: object
                  properties:
                    completed:
                      type: integer
                      example: 4
                    total:
                      type: integer
                      example: 10
                  description: "Number of units completed out of the total units."
                CompletedExercises:
                  type: object
                  properties:
                    completed:
                      type: integer
                      example: 34
                    total:
                      type: integer
                      example: 58
                  description: "Number of exercises completed out of the total exercises."
        '403':
          description: Access denied - user does not have permission to view this progress.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Access Denied: You can only view your own or your students progress.'
        '401':
          description: Unauthorized - Missing or invalid authentication token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorization:
                    type: string
                    example: 'Missing Authorization header'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Internal Server Error: Unable to retrieve user progress'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts/{id}:
    patch:
      tags:
        - post
      summary: Update a post
      description: Only the author of the post can update it.
      operationId: postEdit
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The post id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The post info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized access to edit post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}/toggle-like:
    post:
      tags:
        - post
      summary: Toggle like on a post
      description: Like or unlike a post. If the post is already liked by the user, it will unlike it, and vice versa. Requires authentication.
      operationId: togglePostLike
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the post to toggle like
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully toggled like status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      liked:
                        type: boolean
                        description: Indicates whether the post is now liked (true) or unliked (false)
                      likeCount:
                        type: integer
                        description: The updated total number of likes for the post
        '401':
          description: Unauthorized - User must be logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/Cohort'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts/{id}/members:
    get:
      tags:
        - cohort
      summary: Get members of a specific cohort
      description: Returns all members (teachers and students) of a specific cohort. Teachers can access any cohort, students can only access their own cohort.
      operationId: getCohortMembers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the cohort to get members from
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      cohort:
                        type: object
                        properties:
                          id:
                            type: integer
                          type:
                            type: string
                      members:
                        type: object
                        properties:
                          students:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          teachers:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                firstName:
                                  type: string
                                lastName:
                                  type: string
        '403':
          description: Unauthorized access to cohort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No members found in cohort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            post:
              properties:
                id:
                  type: integer
                content:
                  type: string

    Cohort:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
        cohortId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        githubUrl:
          type: string

    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        bio:
          type: string
        githubUrl:
          type: string
        password:
          type: string

    UpdatePost:
      type: object
      properties:
        content:
          type: string

    UpdateUser:
      type: object
      properties:
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        cohortId:
          type: integer
          nullable: true
        role:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        githubUrl:
          type: string
          nullable: true

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      firstName:
                        type: string
                      lastName:
                        type: string
                      cohort:
                        type: object
                        properties:
                          id:
                            type: integer
                          type:
                            type: string
                  stats:
                    type: object
                    properties:
                      likes:
                        type: integer
                      comments:
                        type: integer

    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                githubUrl:
                  type: string
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string

    ToggleLikeResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            liked:
              type: boolean
              description: Indicates whether the post is now liked (true) or unliked (false)
            likeCount:
              type: integer
              description: The updated total number of likes for the post
