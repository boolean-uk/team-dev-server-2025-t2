// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  userName      String
  firstName     String
  lastName      String
  githubUrl     String?
  bio           String?
  role          Role      @default(STUDENT)
  cohortId      Int?
  cohort        Cohort?   @relation(fields: [cohortId], references: [id])
  posts         Post[]
  deliveryLogs  DeliveryLog[]
  postLikes     PostLike[]
  postComments  PostComment[]
}

enum CohortType {
  SOFTWARE_DEVELOPMENT
  FRONTEND_DEVELOPMENT
  DATA_ANALYTICS
}

model Cohort {
  id            Int           @id @default(autoincrement())
  type          CohortType    @default(SOFTWARE_DEVELOPMENT)
  users         User[]
  cohortNumber  Int
  deliveryLogs  DeliveryLog[]
}

model Post {
  id        Int           @id @default(autoincrement())
  content   String
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     PostLike[]
  comments  PostComment[]

  @@index([createdAt(sort: Desc)])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(2560)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryLog {
  id        Int           @id @default(autoincrement())
  date      DateTime
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  cohortId  Int
  cohort    Cohort        @relation(fields: [cohortId], references: [id])
  lines     DeliveryLogLine[]
}

model DeliveryLogLine {
  id        Int           @id @default(autoincrement())
  content   String
  logId     Int
  log       DeliveryLog   @relation(fields: [logId], references: [id])
}
